generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id                    Int       @id @default(autoincrement())
  bio                   String?
  location              String?
  phoneNumber           String?
  profilePicture        String?
  dateOfBirth           DateTime?
  gender                String?
  education             String?
  occupation            String?
  interests             String?
  language              String?
  totalLearningHours    Int       @default(0)
  totalCoursesCompleted Int       @default(0)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model AchievementType {
  id           Int      @id @default(autoincrement())
  code         String   @unique
  name         String
  description  String?
  icon         String?
  badgeImage   String?
  triggerEvent String?
  points       Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  achievements Achievement[]
}

model Achievement {
  id        Int      @id @default(autoincrement())
  userId    Int
  typeId    Int
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User            @relation(fields: [userId], references: [id])
  type AchievementType @relation(fields: [typeId], references: [id])
}

model SystemMetric {
  id           Int      @id @default(autoincrement())
  timestamp    DateTime @default(now())
  responseTime Float
  cpuUsage     Float
  memoryUsage  Float
  requestCount Int
  errorCount   Int
  createdAt    DateTime @default(now())
}

model UserActivity {
  id              Int      @id @default(autoincrement())
  userId          Int
  timestamp       DateTime @default(now())
  action          String
  resourceType    String
  resourceId      Int
  sessionDuration Int
  ipAddress       String
  userAgent       String
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  type      String
  data      Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model NotificationTemplate {
  id        Int      @id @default(autoincrement())
  type      String
  title     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id               Int      @id @default(autoincrement())
  content          String
  upvotes          Int      @default(0)
  downvotes        Int      @default(0)
  isAcceptedAnswer Boolean  @default(false)
  authorId         Int
  topicId          Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  author  User    @relation(fields: [authorId], references: [id])
  topic   Topic   @relation(fields: [topicId], references: [id])
  replies Reply[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  content   String
  upvotes   Int      @default(0)
  downvotes Int      @default(0)
  authorId  Int
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id])
  post   Post @relation(fields: [postId], references: [id])
}

model Topic {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  isActive    Boolean  @default(true)
  isPinned    Boolean  @default(false)
  viewCount   Int      @default(0)
  creatorId   Int
  courseId    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator User    @relation(fields: [creatorId], references: [id])
  course  Course? @relation(fields: [courseId], references: [id])
  posts   Post[]
}

model CourseEnrollment {
  id          Int       @id @default(autoincrement())
  userId      Int
  courseId    Int
  status      String
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user     User            @relation(fields: [userId], references: [id])
  course   Course          @relation(fields: [courseId], references: [id])
  progress CourseProgress?
}

model CourseProgress {
  id                 Int      @id @default(autoincrement())
  enrollmentId       Int      @unique // Ensure it's unique for a one-to-one relation
  completedLessons   Int[]
  currentLesson      Int
  progressPercentage Float
  totalTimeSpent     Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  enrollment CourseEnrollment @relation(fields: [enrollmentId], references: [id])
}

model CourseReview {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String
  userId    Int
  courseId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
}

model CourseSection {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  order       Int
  courseId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course  Course         @relation(fields: [courseId], references: [id])
  lessons CourseLesson[]
}

model CourseLesson {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  order       Int
  type        String
  content     String?
  videoUrl    String?
  duration    String?
  isPreview   Boolean  @default(false)
  sectionId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  section CourseSection @relation(fields: [sectionId], references: [id])
}

model Course {
  id              Int      @id @default(autoincrement())
  title           String
  description     String?
  thumbnail       String?
  status          String
  price           Float
  duration        String?
  tags            String[]
  level           String
  enrollmentCount Int      @default(0)
  completionCount Int      @default(0)
  averageRating   Float    @default(0.0)
  reviewCount     Int      @default(0)
  instructorId    Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  instructor  User               @relation(fields: [instructorId], references: [id])
  sections    CourseSection[]
  enrollments CourseEnrollment[]
  reviews     CourseReview[]
  Topic       Topic[]
  Certificate Certificate[]
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  roles     String[]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile           UserProfile?
  enrollments       CourseEnrollment[]
  instructedCourses Course[]
  achievements      Achievement[]
  certificates      Certificate[]
  notifications     Notification[]
  UserActivity      UserActivity[]
  Post              Post[]
  Reply             Reply[]
  Topic             Topic[]
  CourseReview      CourseReview[]
}

model CertificateTemplate {
  id              Int           @id @default(autoincrement())
  name            String
  description     String        @db.Text
  backgroundImage String
  isDefault       Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Certificate     Certificate[]
}

model Certificate {
  id                Int      @id @default(autoincrement())
  userId            Int
  courseId          Int
  templateId        Int
  certificateNumber String   @unique
  issueDate         DateTime
  data              Json
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user     User                @relation(fields: [userId], references: [id])
  course   Course              @relation(fields: [courseId], references: [id])
  template CertificateTemplate @relation(fields: [templateId], references: [id])
}
